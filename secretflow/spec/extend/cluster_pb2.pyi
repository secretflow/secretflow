"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2023 Ant Group Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class SFClusterDesc(google.protobuf.message.Message):
    """Intrinsic properties of a SecretFlow cluster, including:

    - Version info.
    - Parties: who participate in the computation.
    - Secret devices including  and their configs.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class DeviceDesc(google.protobuf.message.Message):
        """Description for a secret device.
        - PYUs do not need to claim since they are plaintext devices.
        - Notes for config:
        At this moment, you have to provide a JSON string for different devices.
        We are going to formalize this part in future.
          * Example SPU config:

        ```json
          {
            "runtime_config": {
                "protocol": "REF2K",
                "field": "FM64"
            },
            "link_desc": {
                "connect_retry_times": 60,
                "connect_retry_interval_ms": 1000,
                "brpc_channel_protocol": "http",
                "brpc_channel_connection_type": "pooled",
                "recv_timeout_ms": 1200000,
                "http_timeout_ms": 1200000
            }
        }
        ```
        Referrences:
        SPU:
        https://www.secretflow.org.cn/docs/spu/latest/en-US/reference/runtime_config#runtimeconfig
        HEU:
        https://www.secretflow.org.cn/docs/secretflow/latest/en-US/source/secretflow.device.device.device#secretflow.device.device.heu.HEU.__init__
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        TYPE_FIELD_NUMBER: builtins.int
        PARTIES_FIELD_NUMBER: builtins.int
        CONFIG_FIELD_NUMBER: builtins.int
        name: builtins.str
        """Name of the device."""
        type: builtins.str
        """Supported: SPU, HEU, TEEU."""
        config: builtins.str
        """Specific config for the secret device."""
        @property
        def parties(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
            """Parties of device."""

        def __init__(
            self,
            *,
            name: builtins.str = ...,
            type: builtins.str = ...,
            parties: collections.abc.Iterable[builtins.str] | None = ...,
            config: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["config", b"config", "name", b"name", "parties", b"parties", "type", b"type"]) -> None: ...

    @typing.final
    class RayFedConfig(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        CROSS_SILO_COMM_BACKEND_FIELD_NUMBER: builtins.int
        cross_silo_comm_backend: builtins.str
        """Indicates communication backend of RayFed.
        Accepted: 'grpc', 'brpc_link'
        Dafault is 'grpc'
        """
        def __init__(
            self,
            *,
            cross_silo_comm_backend: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["cross_silo_comm_backend", b"cross_silo_comm_backend"]) -> None: ...

    SF_VERSION_FIELD_NUMBER: builtins.int
    PY_VERSION_FIELD_NUMBER: builtins.int
    PARTIES_FIELD_NUMBER: builtins.int
    DEVICES_FIELD_NUMBER: builtins.int
    RAY_FED_CONFIG_FIELD_NUMBER: builtins.int
    sf_version: builtins.str
    """SecretFlow version."""
    py_version: builtins.str
    """Python version."""
    @property
    def parties(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Joined entities.
        e.g. ["alice", "bob",...].
        """

    @property
    def devices(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SFClusterDesc.DeviceDesc]:
        """Description of secret devices"""

    @property
    def ray_fed_config(self) -> global___SFClusterDesc.RayFedConfig: ...
    def __init__(
        self,
        *,
        sf_version: builtins.str = ...,
        py_version: builtins.str = ...,
        parties: collections.abc.Iterable[builtins.str] | None = ...,
        devices: collections.abc.Iterable[global___SFClusterDesc.DeviceDesc] | None = ...,
        ray_fed_config: global___SFClusterDesc.RayFedConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["ray_fed_config", b"ray_fed_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["devices", b"devices", "parties", b"parties", "py_version", b"py_version", "ray_fed_config", b"ray_fed_config", "sf_version", b"sf_version"]) -> None: ...

global___SFClusterDesc = SFClusterDesc

@typing.final
class SFClusterConfig(google.protobuf.message.Message):
    """Runtime Config for a SecretFlow cluster.
    Besides intrinsic SFClusterDesc, dynamic network configs are provided.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class RayFedConfig(google.protobuf.message.Message):
        """Addresses for the RayFed cluster of each party."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        PARTIES_FIELD_NUMBER: builtins.int
        ADDRESSES_FIELD_NUMBER: builtins.int
        LISTEN_ADDRESSES_FIELD_NUMBER: builtins.int
        @property
        def parties(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
        @property
        def addresses(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
        @property
        def listen_addresses(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
        def __init__(
            self,
            *,
            parties: collections.abc.Iterable[builtins.str] | None = ...,
            addresses: collections.abc.Iterable[builtins.str] | None = ...,
            listen_addresses: collections.abc.Iterable[builtins.str] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["addresses", b"addresses", "listen_addresses", b"listen_addresses", "parties", b"parties"]) -> None: ...

    @typing.final
    class SPUConfig(google.protobuf.message.Message):
        """Contains addresses for one SPU device."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        PARTIES_FIELD_NUMBER: builtins.int
        ADDRESSES_FIELD_NUMBER: builtins.int
        LISTEN_ADDRESSES_FIELD_NUMBER: builtins.int
        name: builtins.str
        """Should match SPU name in SFClusterDesc.devices."""
        @property
        def parties(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
        @property
        def addresses(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
        @property
        def listen_addresses(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
        def __init__(
            self,
            *,
            name: builtins.str = ...,
            parties: collections.abc.Iterable[builtins.str] | None = ...,
            addresses: collections.abc.Iterable[builtins.str] | None = ...,
            listen_addresses: collections.abc.Iterable[builtins.str] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["addresses", b"addresses", "listen_addresses", b"listen_addresses", "name", b"name", "parties", b"parties"]) -> None: ...

    @typing.final
    class PublicConfig(google.protobuf.message.Message):
        """Public and shared to all parties."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        RAY_FED_CONFIG_FIELD_NUMBER: builtins.int
        SPU_CONFIGS_FIELD_NUMBER: builtins.int
        BARRIER_ON_SHUTDOWN_FIELD_NUMBER: builtins.int
        INFERENCE_CONFIG_FIELD_NUMBER: builtins.int
        WEBHOOK_CONFIG_FIELD_NUMBER: builtins.int
        barrier_on_shutdown: builtins.bool
        @property
        def ray_fed_config(self) -> global___SFClusterConfig.RayFedConfig: ...
        @property
        def spu_configs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SFClusterConfig.SPUConfig]: ...
        @property
        def inference_config(self) -> global___SFClusterConfig.InferenceConfig: ...
        @property
        def webhook_config(self) -> global___SFClusterConfig.WebhookConfig: ...
        def __init__(
            self,
            *,
            ray_fed_config: global___SFClusterConfig.RayFedConfig | None = ...,
            spu_configs: collections.abc.Iterable[global___SFClusterConfig.SPUConfig] | None = ...,
            barrier_on_shutdown: builtins.bool = ...,
            inference_config: global___SFClusterConfig.InferenceConfig | None = ...,
            webhook_config: global___SFClusterConfig.WebhookConfig | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["inference_config", b"inference_config", "ray_fed_config", b"ray_fed_config", "webhook_config", b"webhook_config"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["barrier_on_shutdown", b"barrier_on_shutdown", "inference_config", b"inference_config", "ray_fed_config", b"ray_fed_config", "spu_configs", b"spu_configs", "webhook_config", b"webhook_config"]) -> None: ...

    @typing.final
    class PrivateConfig(google.protobuf.message.Message):
        """Different for each party.
        Private and unique to each party.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        SELF_PARTY_FIELD_NUMBER: builtins.int
        RAY_HEAD_ADDR_FIELD_NUMBER: builtins.int
        self_party: builtins.str
        ray_head_addr: builtins.str
        def __init__(
            self,
            *,
            self_party: builtins.str = ...,
            ray_head_addr: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["ray_head_addr", b"ray_head_addr", "self_party", b"self_party"]) -> None: ...

    @typing.final
    class InferenceConfig(google.protobuf.message.Message):
        """the inferencer from secretflow_serving_lib.tools needs ports to communication.
        inferencer can make predition based on tar package of model.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        PARTIES_FIELD_NUMBER: builtins.int
        ADDRESSES_FIELD_NUMBER: builtins.int
        @property
        def parties(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
        @property
        def addresses(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
        def __init__(
            self,
            *,
            parties: collections.abc.Iterable[builtins.str] | None = ...,
            addresses: collections.abc.Iterable[builtins.str] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["addresses", b"addresses", "parties", b"parties"]) -> None: ...

    @typing.final
    class WebhookConfig(google.protobuf.message.Message):
        """sf will use webhook url to update status, such as train progress"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        PROGRESS_URL_FIELD_NUMBER: builtins.int
        progress_url: builtins.str
        def __init__(
            self,
            *,
            progress_url: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["progress_url", b"progress_url"]) -> None: ...

    DESC_FIELD_NUMBER: builtins.int
    PUBLIC_CONFIG_FIELD_NUMBER: builtins.int
    PRIVATE_CONFIG_FIELD_NUMBER: builtins.int
    @property
    def desc(self) -> global___SFClusterDesc:
        """Intrinsic properties."""

    @property
    def public_config(self) -> global___SFClusterConfig.PublicConfig:
        """Dynamic runtime public configs."""

    @property
    def private_config(self) -> global___SFClusterConfig.PrivateConfig:
        """Dynamic runtime private configs."""

    def __init__(
        self,
        *,
        desc: global___SFClusterDesc | None = ...,
        public_config: global___SFClusterConfig.PublicConfig | None = ...,
        private_config: global___SFClusterConfig.PrivateConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["desc", b"desc", "private_config", b"private_config", "public_config", b"public_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["desc", b"desc", "private_config", b"private_config", "public_config", b"public_config"]) -> None: ...

global___SFClusterConfig = SFClusterConfig
