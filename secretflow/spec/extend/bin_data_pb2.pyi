"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2023 Ant Group Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Bin(google.protobuf.message.Message):
    """bin level public info"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LEFT_BOUND_FIELD_NUMBER: builtins.int
    RIGHT_BOUND_FIELD_NUMBER: builtins.int
    FILLING_VALUE_FIELD_NUMBER: builtins.int
    TOTAL_COUNT_FIELD_NUMBER: builtins.int
    MARK_FOR_MERGE_FIELD_NUMBER: builtins.int
    left_bound: builtins.float
    """if both left bound and right bound are 0, indicates NaN value bins.
    only effective if not category
    """
    right_bound: builtins.float
    filling_value: builtins.float
    """note bin iv is hidden for security consideration"""
    total_count: builtins.int
    """note bad rate or positive count is hidden for security consideration"""
    mark_for_merge: builtins.bool
    """mark
    consecutive bins with mark will be merged into one
    this is the only field that can be modified by front end
    """
    def __init__(
        self,
        *,
        left_bound: builtins.float = ...,
        right_bound: builtins.float = ...,
        filling_value: builtins.float = ...,
        total_count: builtins.int = ...,
        mark_for_merge: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["filling_value", b"filling_value", "left_bound", b"left_bound", "mark_for_merge", b"mark_for_merge", "right_bound", b"right_bound", "total_count", b"total_count"]) -> None: ...

global___Bin = Bin

@typing.final
class VariableBins(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FEATURE_NAME_FIELD_NUMBER: builtins.int
    FEATURE_TYPE_FIELD_NUMBER: builtins.int
    VALID_BIN_COUNT_FIELD_NUMBER: builtins.int
    IV_FIELD_NUMBER: builtins.int
    VALID_BINS_FIELD_NUMBER: builtins.int
    ELSE_BIN_FIELD_NUMBER: builtins.int
    PARTY_NAME_FIELD_NUMBER: builtins.int
    IS_WOE_FIELD_NUMBER: builtins.int
    feature_name: builtins.str
    """feature level public info"""
    feature_type: builtins.str
    valid_bin_count: builtins.int
    iv: builtins.float
    """for non-woe binning method, leave this to 0 is fine."""
    party_name: builtins.str
    is_woe: builtins.bool
    """indicate if the binning method is woe. If true, filling_value = bin woe."""
    @property
    def valid_bins(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Bin]: ...
    @property
    def else_bin(self) -> global___Bin:
        """use single bin for else bin"""

    def __init__(
        self,
        *,
        feature_name: builtins.str = ...,
        feature_type: builtins.str = ...,
        valid_bin_count: builtins.int = ...,
        iv: builtins.float = ...,
        valid_bins: collections.abc.Iterable[global___Bin] | None = ...,
        else_bin: global___Bin | None = ...,
        party_name: builtins.str = ...,
        is_woe: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["else_bin", b"else_bin"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["else_bin", b"else_bin", "feature_name", b"feature_name", "feature_type", b"feature_type", "is_woe", b"is_woe", "iv", b"iv", "party_name", b"party_name", "valid_bin_count", b"valid_bin_count", "valid_bins", b"valid_bins"]) -> None: ...

global___VariableBins = VariableBins

@typing.final
class Bins(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VARIABLE_BINS_FIELD_NUMBER: builtins.int
    MODEL_HASH_FIELD_NUMBER: builtins.int
    model_hash: builtins.str
    @property
    def variable_bins(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___VariableBins]: ...
    def __init__(
        self,
        *,
        variable_bins: collections.abc.Iterable[global___VariableBins] | None = ...,
        model_hash: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["model_hash", b"model_hash", "variable_bins", b"variable_bins"]) -> None: ...

global___Bins = Bins
