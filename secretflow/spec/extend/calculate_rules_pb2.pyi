"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2023 Ant Group Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class CalculateOpRules(google.protobuf.message.Message):
    """input columns set by Component::io::col_params"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _OpType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _OpTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[CalculateOpRules._OpType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        INVAL: CalculateOpRules._OpType.ValueType  # 0
        """inval type"""
        STANDARDIZE: CalculateOpRules._OpType.ValueType  # 1
        """len(operands) == 0"""
        NORMALIZATION: CalculateOpRules._OpType.ValueType  # 2
        """len(operands) == 0"""
        RANGE_LIMIT: CalculateOpRules._OpType.ValueType  # 3
        """len(operands) == 2, [min, max]"""
        UNARY: CalculateOpRules._OpType.ValueType  # 4
        """len(operands) == 3, [(+ -), unary_op(+ - * /), value]
        if operandsp[0] == "+", column unary_op value
        if operandsp[0] == "-", value unary_op column
        """
        RECIPROCAL: CalculateOpRules._OpType.ValueType  # 5
        """len(operands) == 0"""
        ROUND: CalculateOpRules._OpType.ValueType  # 6
        """len(operands) == 0"""
        LOG_ROUND: CalculateOpRules._OpType.ValueType  # 7
        """len(operands) == 1, [bias]"""
        SQRT: CalculateOpRules._OpType.ValueType  # 8
        """len(operands) == 0"""
        LOG: CalculateOpRules._OpType.ValueType  # 9
        """len(operands) == 2, [log_base, bias]"""
        EXP: CalculateOpRules._OpType.ValueType  # 10
        """len(operands) == 0"""
        LENGTH: CalculateOpRules._OpType.ValueType  # 11
        """len(operands) == 0"""
        SUBSTR: CalculateOpRules._OpType.ValueType  # 12
        """len(operands) == 2, [start_pos, length]"""

    class OpType(_OpType, metaclass=_OpTypeEnumTypeWrapper): ...
    INVAL: CalculateOpRules.OpType.ValueType  # 0
    """inval type"""
    STANDARDIZE: CalculateOpRules.OpType.ValueType  # 1
    """len(operands) == 0"""
    NORMALIZATION: CalculateOpRules.OpType.ValueType  # 2
    """len(operands) == 0"""
    RANGE_LIMIT: CalculateOpRules.OpType.ValueType  # 3
    """len(operands) == 2, [min, max]"""
    UNARY: CalculateOpRules.OpType.ValueType  # 4
    """len(operands) == 3, [(+ -), unary_op(+ - * /), value]
    if operandsp[0] == "+", column unary_op value
    if operandsp[0] == "-", value unary_op column
    """
    RECIPROCAL: CalculateOpRules.OpType.ValueType  # 5
    """len(operands) == 0"""
    ROUND: CalculateOpRules.OpType.ValueType  # 6
    """len(operands) == 0"""
    LOG_ROUND: CalculateOpRules.OpType.ValueType  # 7
    """len(operands) == 1, [bias]"""
    SQRT: CalculateOpRules.OpType.ValueType  # 8
    """len(operands) == 0"""
    LOG: CalculateOpRules.OpType.ValueType  # 9
    """len(operands) == 2, [log_base, bias]"""
    EXP: CalculateOpRules.OpType.ValueType  # 10
    """len(operands) == 0"""
    LENGTH: CalculateOpRules.OpType.ValueType  # 11
    """len(operands) == 0"""
    SUBSTR: CalculateOpRules.OpType.ValueType  # 12
    """len(operands) == 2, [start_pos, length]"""

    OP_FIELD_NUMBER: builtins.int
    OPERANDS_FIELD_NUMBER: builtins.int
    NEW_COL_NAME_FIELD_NUMBER: builtins.int
    op: global___CalculateOpRules.OpType.ValueType
    new_col_name: builtins.str
    @property
    def operands(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        op: global___CalculateOpRules.OpType.ValueType = ...,
        operands: collections.abc.Iterable[builtins.str] | None = ...,
        new_col_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["new_col_name", b"new_col_name", "op", b"op", "operands", b"operands"]) -> None: ...

global___CalculateOpRules = CalculateOpRules
