"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2023 Ant Group Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class CaseWhenRule(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ValueExpr(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class _ValueType:
            ValueType = typing.NewType("ValueType", builtins.int)
            V: typing_extensions.TypeAlias = ValueType

        class _ValueTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[CaseWhenRule.ValueExpr._ValueType.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
            INVAL: CaseWhenRule.ValueExpr._ValueType.ValueType  # 0
            CONST_INT: CaseWhenRule.ValueExpr._ValueType.ValueType  # 1
            """a int constant, fill in i"""
            CONST_FLOAT: CaseWhenRule.ValueExpr._ValueType.ValueType  # 2
            """a float constant, fill in f"""
            CONST_STR: CaseWhenRule.ValueExpr._ValueType.ValueType  # 3
            """a str constant, fill in s"""
            COLUMN: CaseWhenRule.ValueExpr._ValueType.ValueType  # 4
            """use another column by column_name"""

        class ValueType(_ValueType, metaclass=_ValueTypeEnumTypeWrapper): ...
        INVAL: CaseWhenRule.ValueExpr.ValueType.ValueType  # 0
        CONST_INT: CaseWhenRule.ValueExpr.ValueType.ValueType  # 1
        """a int constant, fill in i"""
        CONST_FLOAT: CaseWhenRule.ValueExpr.ValueType.ValueType  # 2
        """a float constant, fill in f"""
        CONST_STR: CaseWhenRule.ValueExpr.ValueType.ValueType  # 3
        """a str constant, fill in s"""
        COLUMN: CaseWhenRule.ValueExpr.ValueType.ValueType  # 4
        """use another column by column_name"""

        TYPE_FIELD_NUMBER: builtins.int
        COLUMN_NAME_FIELD_NUMBER: builtins.int
        I_FIELD_NUMBER: builtins.int
        F_FIELD_NUMBER: builtins.int
        S_FIELD_NUMBER: builtins.int
        type: global___CaseWhenRule.ValueExpr.ValueType.ValueType
        column_name: builtins.str
        i: builtins.int
        f: builtins.float
        s: builtins.str
        def __init__(
            self,
            *,
            type: global___CaseWhenRule.ValueExpr.ValueType.ValueType = ...,
            column_name: builtins.str = ...,
            i: builtins.int = ...,
            f: builtins.float = ...,
            s: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["column_name", b"column_name", "f", b"f", "i", b"i", "s", b"s", "type", b"type"]) -> None: ...

    @typing.final
    class Cond(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class _CondOp:
            ValueType = typing.NewType("ValueType", builtins.int)
            V: typing_extensions.TypeAlias = ValueType

        class _CondOpEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[CaseWhenRule.Cond._CondOp.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
            INVAL: CaseWhenRule.Cond._CondOp.ValueType  # 0
            EQ: CaseWhenRule.Cond._CondOp.ValueType  # 1
            """=="""
            NE: CaseWhenRule.Cond._CondOp.ValueType  # 2
            """!="""
            LT: CaseWhenRule.Cond._CondOp.ValueType  # 3
            """<"""
            LE: CaseWhenRule.Cond._CondOp.ValueType  # 4
            """<="""
            GT: CaseWhenRule.Cond._CondOp.ValueType  # 5
            """>"""
            GE: CaseWhenRule.Cond._CondOp.ValueType  # 6
            """>="""

        class CondOp(_CondOp, metaclass=_CondOpEnumTypeWrapper): ...
        INVAL: CaseWhenRule.Cond.CondOp.ValueType  # 0
        EQ: CaseWhenRule.Cond.CondOp.ValueType  # 1
        """=="""
        NE: CaseWhenRule.Cond.CondOp.ValueType  # 2
        """!="""
        LT: CaseWhenRule.Cond.CondOp.ValueType  # 3
        """<"""
        LE: CaseWhenRule.Cond.CondOp.ValueType  # 4
        """<="""
        GT: CaseWhenRule.Cond.CondOp.ValueType  # 5
        """>"""
        GE: CaseWhenRule.Cond.CondOp.ValueType  # 6
        """>="""

        COND_COLUMN_FIELD_NUMBER: builtins.int
        OP_FIELD_NUMBER: builtins.int
        COND_VALUE_FIELD_NUMBER: builtins.int
        cond_column: builtins.str
        """left operator of CondOp"""
        op: global___CaseWhenRule.Cond.CondOp.ValueType
        @property
        def cond_value(self) -> global___CaseWhenRule.ValueExpr:
            """right operator of CondOp"""

        def __init__(
            self,
            *,
            cond_column: builtins.str = ...,
            op: global___CaseWhenRule.Cond.CondOp.ValueType = ...,
            cond_value: global___CaseWhenRule.ValueExpr | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["cond_value", b"cond_value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["cond_column", b"cond_column", "cond_value", b"cond_value", "op", b"op"]) -> None: ...

    @typing.final
    class When(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class _ConnectType:
            ValueType = typing.NewType("ValueType", builtins.int)
            V: typing_extensions.TypeAlias = ValueType

        class _ConnectTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[CaseWhenRule.When._ConnectType.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
            INVAL: CaseWhenRule.When._ConnectType.ValueType  # 0
            AND: CaseWhenRule.When._ConnectType.ValueType  # 1
            OR: CaseWhenRule.When._ConnectType.ValueType  # 2

        class ConnectType(_ConnectType, metaclass=_ConnectTypeEnumTypeWrapper): ...
        INVAL: CaseWhenRule.When.ConnectType.ValueType  # 0
        AND: CaseWhenRule.When.ConnectType.ValueType  # 1
        OR: CaseWhenRule.When.ConnectType.ValueType  # 2

        CONDS_FIELD_NUMBER: builtins.int
        CONNECTIONS_FIELD_NUMBER: builtins.int
        THEN_FIELD_NUMBER: builtins.int
        @property
        def conds(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CaseWhenRule.Cond]:
            """len(conds) >= 1"""

        @property
        def connections(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___CaseWhenRule.When.ConnectType.ValueType]:
            """how to connect this cond to previous cond
            use AND / OR to connect more than one conds
            len(connections) == len(conds) - 1
            """

        @property
        def then(self) -> global___CaseWhenRule.ValueExpr: ...
        def __init__(
            self,
            *,
            conds: collections.abc.Iterable[global___CaseWhenRule.Cond] | None = ...,
            connections: collections.abc.Iterable[global___CaseWhenRule.When.ConnectType.ValueType] | None = ...,
            then: global___CaseWhenRule.ValueExpr | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["then", b"then"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["conds", b"conds", "connections", b"connections", "then", b"then"]) -> None: ...

    WHENS_FIELD_NUMBER: builtins.int
    ELSE_VALUE_FIELD_NUMBER: builtins.int
    OUTPUT_COLUMN_FIELD_NUMBER: builtins.int
    FLOAT_EPSILON_FIELD_NUMBER: builtins.int
    AS_LABEL_FIELD_NUMBER: builtins.int
    output_column: builtins.str
    float_epsilon: builtins.float
    as_label: builtins.bool
    @property
    def whens(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CaseWhenRule.When]:
        """len(whens) >= 1"""

    @property
    def else_value(self) -> global___CaseWhenRule.ValueExpr: ...
    def __init__(
        self,
        *,
        whens: collections.abc.Iterable[global___CaseWhenRule.When] | None = ...,
        else_value: global___CaseWhenRule.ValueExpr | None = ...,
        output_column: builtins.str = ...,
        float_epsilon: builtins.float = ...,
        as_label: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["else_value", b"else_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["as_label", b"as_label", "else_value", b"else_value", "float_epsilon", b"float_epsilon", "output_column", b"output_column", "whens", b"whens"]) -> None: ...

global___CaseWhenRule = CaseWhenRule
