"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2024 Ant Group Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Features(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FEATURE_NAMES_FIELD_NUMBER: builtins.int
    @property
    def feature_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """feature names of one party"""

    def __init__(
        self,
        *,
        feature_names: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["feature_names", b"feature_names"]) -> None: ...

global___Features = Features

@typing.final
class Common(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class PartitionColumnEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___Features: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___Features | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    BASE_FIELD_NUMBER: builtins.int
    LINK_FIELD_NUMBER: builtins.int
    PARTITION_COLUMN_FIELD_NUMBER: builtins.int
    TREE_NUM_FIELD_NUMBER: builtins.int
    base: builtins.float
    """base_score"""
    link: builtins.str
    tree_num: builtins.int
    """number of decision trees"""
    @property
    def partition_column(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___Features]:
        """key is party, value features"""

    def __init__(
        self,
        *,
        base: builtins.float = ...,
        link: builtins.str = ...,
        partition_column: collections.abc.Mapping[builtins.str, global___Features] | None = ...,
        tree_num: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["base", b"base", "link", b"link", "partition_column", b"partition_column", "tree_num", b"tree_num"]) -> None: ...

global___Common = Common

@typing.final
class TreeLeafWeights(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    WEIGHTS_FIELD_NUMBER: builtins.int
    @property
    def weights(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """leaf weights of single tree"""

    def __init__(
        self,
        *,
        weights: collections.abc.Iterable[builtins.float] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["weights", b"weights"]) -> None: ...

global___TreeLeafWeights = TreeLeafWeights

@typing.final
class EnsembleLeafWeights(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TREE_LEAF_WEIGHTS_FIELD_NUMBER: builtins.int
    @property
    def tree_leaf_weights(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TreeLeafWeights]:
        """leaf weights of all trees of ensemble"""

    def __init__(
        self,
        *,
        tree_leaf_weights: collections.abc.Iterable[global___TreeLeafWeights] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["tree_leaf_weights", b"tree_leaf_weights"]) -> None: ...

global___EnsembleLeafWeights = EnsembleLeafWeights

@typing.final
class SplitTree(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SPLIT_FEATURES_FIELD_NUMBER: builtins.int
    SPLIT_VALUES_FIELD_NUMBER: builtins.int
    SPLIT_INDICES_FIELD_NUMBER: builtins.int
    LEAF_INDICES_FIELD_NUMBER: builtins.int
    @property
    def split_features(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """if -1, it means other party's feature"""

    @property
    def split_values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """if Infinity, it means other party's value"""

    @property
    def split_indices(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    @property
    def leaf_indices(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    def __init__(
        self,
        *,
        split_features: collections.abc.Iterable[builtins.int] | None = ...,
        split_values: collections.abc.Iterable[builtins.float] | None = ...,
        split_indices: collections.abc.Iterable[builtins.int] | None = ...,
        leaf_indices: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["leaf_indices", b"leaf_indices", "split_features", b"split_features", "split_indices", b"split_indices", "split_values", b"split_values"]) -> None: ...

global___SplitTree = SplitTree

@typing.final
class EnsembleSplitTrees(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SPLIT_TREES_FIELD_NUMBER: builtins.int
    @property
    def split_trees(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SplitTree]: ...
    def __init__(
        self,
        *,
        split_trees: collections.abc.Iterable[global___SplitTree] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["split_trees", b"split_trees"]) -> None: ...

global___EnsembleSplitTrees = EnsembleSplitTrees

@typing.final
class SgbModel(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class EnsembleSplitTreesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___EnsembleSplitTrees: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___EnsembleSplitTrees | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    LABEL_HOLDER_FIELD_NUMBER: builtins.int
    COMMON_FIELD_NUMBER: builtins.int
    ENSEMBLE_LEAF_WEIGHTS_FIELD_NUMBER: builtins.int
    ENSEMBLE_SPLIT_TREES_FIELD_NUMBER: builtins.int
    label_holder: builtins.str
    @property
    def common(self) -> global___Common: ...
    @property
    def ensemble_leaf_weights(self) -> global___EnsembleLeafWeights: ...
    @property
    def ensemble_split_trees(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___EnsembleSplitTrees]:
        """key is party"""

    def __init__(
        self,
        *,
        label_holder: builtins.str = ...,
        common: global___Common | None = ...,
        ensemble_leaf_weights: global___EnsembleLeafWeights | None = ...,
        ensemble_split_trees: collections.abc.Mapping[builtins.str, global___EnsembleSplitTrees] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["common", b"common", "ensemble_leaf_weights", b"ensemble_leaf_weights"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["common", b"common", "ensemble_leaf_weights", b"ensemble_leaf_weights", "ensemble_split_trees", b"ensemble_split_trees", "label_holder", b"label_holder"]) -> None: ...

global___SgbModel = SgbModel
