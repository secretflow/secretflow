# application configurations.
applications:
  # enable auto tune or not.
  enable_tune: true
  # which dataset to run
  # e.g. all # run all support datasets.
  # e.g. bank  # only run with bank dataset.
  # e.g. [bank, mnist] # run with bank and mnist dataset.
  dataset: [bank, creditcard, movielens, criteo, cifar10, mnist]
  # which model to run
  # e.g. all # run all support models.
  # e.g. dnn # only run with dnn model.
  # e.g. [dnn, deepfm] # run with dnn and deepfm model.
  model: [dnn, deepfm, resnet18, vgg16]
  # which attack to run
  # e.g. all # run all support attacks.
  # e.g. fia # only run with fia attack.
  # e.g. [fia, lia] # run with fia and lia attack.
  attack: all
  # which defenses to run
  # e.g. all # run all support defenses.
  # e.g. gra_avg # only run with gra_avg defense.
  # e.g. [cae, mid] # run with cae and mid defense.
  defense: all
  # whether to run a simple test with small dataset and small epoch.
  simple: false # test
  # whether to use gpu to accelerate.
  use_gpu: true
  # whether using debug mode to run sf or not (false for sim mode.)
  debug_mode: true
  # a random seed for python and torch that can be set to achieve reproducibility
  random_seed: 1234
  # whether to enable monitoring of experimental resource consumption (will be performance loss).
  enable_monitor: False
paths:
  # the dataset store path, you can put the datasets here, or will auto download.
  datasets: ~
  # the autoattack result store path.
  autoattack_path: ~
resources:
  # The names and memory capacities of all GPUs included in your cluster.
  # The key is the name of the GPU, and the value is the memory capacity of the GPU.
  # Ensure that the key matches the GPU name returned by 'nvidia-smi'.
  # Multiple keys-values can be specified when you have multiple types of GPUs in your cluster.
  gpu:
    V100: 17179869184 # = 16384 MiB
# tuner parameters
tune:
  # application hyperparameters
  applications:
    # dataset name
    creditcard:
      # model name
      dnn:
        train_batch_size: [ 128 ]
        hidden_size_range: [ 28, 64 ]
        alice_feature_nums_range: [ 25 ]
        dnn_base_units_size_range_alice: [ [ -1 ],[ -0.5, -1, -1 ], ]
        dnn_base_units_size_range_bob: [ [ 4 ] ]
        dnn_fuse_units_size_range: [ [ 1 ],[ -1, -1, 1 ], ]
        dnn_embedding_dim_range: ~
    bank:
      dnn:
        train_batch_size: [ 128 ]
        hidden_size_range: [ 32, 64 ]
        alice_feature_nums_range: [ 9, 1, 5, 15 ]
        dnn_base_units_size_range_alice: [ [ 128, -1 ], [ -1 ], ]
        dnn_base_units_size_range_bob: ~
        dnn_fuse_units_size_range: [ [ 1 ], [ 128, 1 ] ]
      deepfm:
        train_batch_size: [ 128 ]
        hidden_size_range: [ 32, 64 ]
        alice_feature_nums_range: [ 9, 1, 5, 15 ]
        dnn_base_units_size_range_alice: [ [ 128, 128, -1 ], [ -1 ], ]
        dnn_base_units_size_range_bob: ~
        dnn_fuse_units_size_range: [ [ 64 ], [ 64, 64 ] ]
        deepfm_embedding_dim_range: [ 8, 16 ]
    drive:
      dnn:
        train_batch_size: [ 64, 128 ]
        alice_feature_nums_range: [ 28 ]
    movielens:
      dnn:
        train_batch_size: [ 128 ]
        hidden_size_range: [ 64, 128 ]
        alice_feature_nums_range: [ 1, 3, 5 ]
        dnn_base_units_size_range_alice: [ [ 256, -1 ], [ 256, 128, -1 ] ]
        dnn_base_units_size_range_bob: ~
        dnn_fuse_units_size_range: [ [ 1 ], [ 256, 128, 1 ] ]
        dnn_embedding_dim_range: [ 8 ]
      deepfm:
        train_batch_size: [ 128 ]
        hidden_size_range: [ 64 ]
        alice_feature_nums_range: [ 1, 3, 5 ]
        dnn_base_units_size_range_alice: [ [ -1 ], [ 256, 128, -1 ] ]
        dnn_base_units_size_range_bob: ~
        dnn_fuse_units_size_range: [ [ 256, 32 ], [ 256, 256, 32 ] ]
        deepfm_embedding_dim_range: [ 4 ]
    criteo:
      dnn:
        train_batch_size: [ 128 ]
        hidden_size_range: [ 32, 64 ]
        alice_feature_nums_range: [ 2, 13, 37 ]
        dnn_base_units_size_range_alice: [ [ 200, 100, -1 ], [ -1 ] ]
        dnn_base_units_size_range_bob: ~
        dnn_fuse_units_size_range: [ [ 64, 1 ] ]
        dnn_embedding_dim_range: [ 16 ]
      deepfm:
        train_batch_size: [ 128 ]
        hidden_size_range: [ 32, 64 ]
        alice_feature_nums_range: [ 2, 13, 37 ]
        dnn_base_units_size_range_alice: [ [ 256, 128, -1 ], [ 256, -1 ],[ -1 ], ]
        dnn_base_units_size_range_bob: ~
        dnn_fuse_units_size_range: [ [ 64 ], [ 64, 64 ] ]
        deepfm_embedding_dim_range: [ 8, 16 ]
    mnist:
      vgg16:
        train_batch_size: [ 128 ]
        hidden_size_range: [ 4608 ]
        # 3 * vgg_resize * vgg_resize // 2
        alice_feature_nums_range: [ 18816 ]
        # 512 * 3 * 3 * 2 = 9216
        dnn_fuse_units_size_range: [ [ 9216, 4096 ],
                                     [ 9216, 4096, 4096 ],
                                     [ 9216, 4096, 4096, 4096, 4096 ], ]
      resnet18:
        train_batch_size: [ 128 ]
        hidden_size_range: [ 512 ]
        # 1 * 28 * 14
        alice_feature_nums_range: [ 392 ]
        # 512 * 2 = 1024
        dnn_fuse_units_size_range: [ [ 1024 ],
                                     [ 1024, 512 ], ]
    cifar10:
      vgg16:
        train_batch_size: [ 64, 128 ]
        # 32 * 16 * 3 = 1536
        alice_feature_nums_range: [ 1536 ]
        # 512 * 3 * 3 * 2 = 9216
        dnn_fuse_units_size_range: [ [ 9216, 4096 ],
                                     [ 9216, 4096, 4096 ],
                                     [ 9216, 4096, 4096, 4096, 4096 ], ]
      resnet18:
        train_batch_size: [ 64, 128 ]
        # 1 * 28 * 14
        alice_feature_nums_range: [ 1536 ]
        # 512 * 2 = 1024
        dnn_fuse_units_size_range: [ [ 1024 ],
                                     [ 1024, 512 ] ]
      resnet20:
        train_batch_size: [ 64, 128 ]
        # 32 * 16 * 3 = 1536
        alice_feature_nums_range: [ 1536 ]
      cnn:
        train_batch_size: [ 64, 128 ]
        # 32 * 16 * 3 = 1536
        alice_feature_nums_range: [ 1536 ]
  # attacks hyperparameters.
  attacks:
    # attack name
    norm: ~
    # attack name
    exploit:
      # attack hyperparameters.
      alpha_acc: [ 0.8,1 ] # 0 - 1
      alpha_grad: [ 0.01,0.1 ] # 0 -1  log
      alpha_kl: [ 0.01,0.1 ] # 0-1
    fia:
      # attack_epochs: [2,5] # < 120
      optim_lr: [ 0.001, 0.0001 ]
    fsha:
      ~
    grad_lia:
      ~
    lia:
      T: [ 0.7, 0.8 ]  # near 0.8
#      alpha: [ 0.9, 0.999 ]  # (0,1) near 0.9
#      lr: [ 0.00002, 0.002 ]
#      ema_decay: [ 0.8, 0.999 ]
      lambda_u: [ 40, 60 ]  # 40 - 60
    replace:
      # blurred does not support embedding layer, so shutdown,
      # blurred: [true,false]
      # gamma: [ 10, 30 ] # 1 - 20
      ~
    replay:
    # target_nums: [ 50, 100 ]
      ~
    batch_lia:
      lr: [ 0.001, 0.01, 0.1 ]
  # defenses hyperparameters
  defenses:
    # defense name.
    de_identification:
      # defense hyperparameter.
      subset_num: [ 3, 7, 11 ]
    grad_avg:
      ~
    mixup:
      lam: [ 0.4, 0.6 ]
    mid:
      mid_lambda: [0.1, 0.5, 1]
    fed_pass: ~
    cae: ~
