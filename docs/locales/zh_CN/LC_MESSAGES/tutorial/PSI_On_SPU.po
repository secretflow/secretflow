# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022 Ant Group Co., Ltd.
# This file is distributed under the same license as the SecretFlow package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: SecretFlow \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-04-06 14:06+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../tutorial/PSI_On_SPU.ipynb:9
msgid "PSI On SPU"
msgstr "SPU隐私求交"

#: ../../tutorial/PSI_On_SPU.ipynb:20
msgid ""
"The following codes are demos only. It’s **NOT for production** due to "
"system security concerns, please **DO NOT** use it directly in "
"production."
msgstr "温馨提示：本文档用于演示目的，演示过程中可能会额外揭露部分信息，请**不要**直接复制代码用于生产"

#: ../../tutorial/PSI_On_SPU.ipynb:31
msgid ""
"PSI(`Private Set Intersection "
"<https://en.wikipedia.org/wiki/Private_set_intersection>`__) is a "
"cryptographic technique that allows two parties holding sets to compare "
"encrypted versions of these sets in order to compute the intersection. In"
" this scenario, neither party reveals anything to the counterparty except"
" for the elements in the intersection."
msgstr ""
"隐私求交（\\ `Private Set Intersection "
"<https://en.wikipedia.org/wiki/Private_set_intersection>`__）是一种使用密码学方法，获取两份数据内容的交集的算法。PSI过程中不泄露任务交集以外的信息。"

#: ../../tutorial/PSI_On_SPU.ipynb:33
msgid "In SecretFlow, SPU device supports three PSI protocol:"
msgstr "在隐语中，SPU设备支持三种隐私求交算法："

#: ../../tutorial/PSI_On_SPU.ipynb:35
msgid ""
"`ECDH <https://ieeexplore.ieee.org/document/6234849/>`__\\ ：semi-honest, "
"based on public key encryption, suitable for small datasets."
msgstr ""
"`ECDH <https://ieeexplore.ieee.org/document/6234849/>`__\\ ：半诚实模型, "
"基于公钥密码学，适用于小数据集。"

#: ../../tutorial/PSI_On_SPU.ipynb:36
msgid ""
"`KKRT <https://eprint.iacr.org/2016/799.pdf>`__\\ ：semi-host, based on "
"cuckoo hashing and OT extension, suitable for large datasets."
msgstr ""
"`KKRT <https://eprint.iacr.org/2016/799.pdf>`__\\ ：半诚实模型, 基于布谷鸟哈希（Cuckoo "
"Hashing）以及高效不经意传输扩展（OT Extension），适用于大数据集。"

#: ../../tutorial/PSI_On_SPU.ipynb:37
msgid ""
"`BC22PCG <https://eprint.iacr.org/2022/334>`__: semi-host, psi from "
"pseudorandom correlation generators."
msgstr "`BC22PCG <https://eprint.iacr.org/2022/334>`__\\ ：半诚实模型, 基于随机相关函数生成器。"

#: ../../tutorial/PSI_On_SPU.ipynb:39
msgid ""
"Before we start, we need to initialize the environment. The following "
"three nodes ``alice``, ``bob``, and ``carol`` are created on a single "
"machine to simulate multiple participants."
msgstr "在开始之前，我们需要初始化环境。以下三个节点 ``alice``， ``bob`` 和 ``carol`` 是在一台机器上创建的，以模拟多个参与者。"

#: ../../tutorial/PSI_On_SPU.ipynb:77
msgid "Preparing dataset"
msgstr "准备数据集"

#: ../../tutorial/PSI_On_SPU.ipynb:88
msgid ""
"First, we need a dataset for constructing vertical partitioned scenarios."
" For simplicity, we use `iris <https://scikit-"
"learn.org/stable/modules/generated/sklearn.datasets.load_iris.html>`__ "
"dataset here. We add two columns to it for subsequent single-column and "
"multi-column intersection demonstrations"
msgstr ""
"首先，我们需要一个数据集来构建垂直分区的场景。为了简单起见，我们在这里使用 `iris <https://scikit-"
"learn.org/stable/modules/generated/sklearn.datasets.load_iris.html>`__ "
"数据集。我们在其中添加两列，用于后续的单键和多键求交演示。"

#: ../../tutorial/PSI_On_SPU.ipynb:90
msgid "uid：Sample unique ID."
msgstr "uid：唯一ID。"

#: ../../tutorial/PSI_On_SPU.ipynb:91
#, python-format
msgid ""
"month：Simulate a scenario where samples are generated monthly. The first "
"50% of the samples are generated in January, and the last 50% of the "
"samples are generated in February."
msgstr "month：模拟每月生成样本的场景，前50%的样本在1月份生成，后50%的样本在2月份生成。"

#: ../../tutorial/PSI_On_SPU.ipynb:364
msgid ""
"In the actual scenario, the sample data is provided by each participant, "
"and the fields for intersection need to be agreed in advance:"
msgstr "在实际场景中，示例数据由每个参与者提供，求交的字段需提前约定："

#: ../../tutorial/PSI_On_SPU.ipynb:366
msgid "The intersection field can be single or multiple."
msgstr "交集字段可以为单个字段，也可以为多个字段，需存在于对应方数据集中。"

#: ../../tutorial/PSI_On_SPU.ipynb:367
msgid ""
"The intersection field must be unique. If there is a duplicate, it needs "
"to be deduplicated in advance."
msgstr "交集字段必须是唯一的。如果存在重复数据，需要在求交前进行去重处理。"

#: ../../tutorial/PSI_On_SPU.ipynb:369
msgid ""
"For example, The following is the data provided by alice for PSI "
"intersection, the intersection field is ``uid`` and ``month``\\ ，we can "
"see that [1, ‘Jan’] is duplicated."
msgstr ""
"举个例子，下面是alice提供的用于隐私求交的数据，求交字段是 ``uid`` 和 ``month``\\ "
"，我们可以看到[1，'Jan']是重复的。"

#: ../../tutorial/PSI_On_SPU.ipynb:381
msgid "The data after deduplication is"
msgstr "去重后的数据集如下"

#: ../../tutorial/PSI_On_SPU.ipynb:392
msgid ""
"We randomly sample the iris data three times to simulate the data "
"provided by ``alice``, ``bob``, and ``carol``, and the three data are in "
"an unaligned state."
msgstr ""
"我们对 iris 数据进行了 3 次随机采样，以模拟 ``alice``、``bob`` 和 ``carol`` "
"提供的数据，三个数据处于未对齐状态。"

#: ../../tutorial/PSI_On_SPU.ipynb:421
msgid "Two parties PSI"
msgstr "两方隐私求交"

#: ../../tutorial/PSI_On_SPU.ipynb:432
msgid "We virtualize three logical devices on the physical device:"
msgstr "我们在物理设备上虚拟化三个逻辑设备："

#: ../../tutorial/PSI_On_SPU.ipynb:434
msgid ""
"alice, bob: PYU device, responsible for the local plaintext computation "
"of the participant."
msgstr "alice, bob: PYU设备，负责参与者的本地明文计算。"

#: ../../tutorial/PSI_On_SPU.ipynb:435
msgid ""
"spu：SPUdevice, consists of alice and bob, responsible for the ciphertext "
"calculation of the two parties."
msgstr "spu：SPU设备，由alice和bob组成，负责双方的密文计算。"

#: ../../tutorial/PSI_On_SPU.ipynb:458
msgid "Single-column PSI"
msgstr "单键隐私求交"

#: ../../tutorial/PSI_On_SPU.ipynb:469
msgid ""
"Next, we use ``uid`` to intersect the two data, SPU provide ``psi_csv`` "
"which take the csv file as input and generate the csv file after the "
"intersection. The default protocol is KKRT."
msgstr ""
"接下来，我们使用 ``uid`` 作为求交列来处理这两个数据，SPU提供 ``psi_csv`` 函数， ``psi_csv`` "
"将csv文件作为输入，并在求交后生成csv文件。默认协议为KKRT。"

#: ../../tutorial/PSI_On_SPU.ipynb:492
msgid ""
"To check the correctness of the results, we use `pandas.DataFrame.join "
"<https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.join.html>`__"
" to inner join da and db. It can be seen that the two data have been "
"aligned according to ``uid`` and sorted according to their "
"lexicographical order."
msgstr ""
"为了校验结果的正确性，我们使用 `pandas.DataFrame.join "
"<https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.join.html>`__"
" 对da和db进行内部求交。可以看到，这两个数据已经根据``uid``对齐，并根据它们的字典顺序排序。"

#: ../../tutorial/PSI_On_SPU.ipynb:770
msgid "Multi-columns PSI"
msgstr "多键隐私求交"

#: ../../tutorial/PSI_On_SPU.ipynb:781
msgid ""
"We can also use multiple fields to intersect, the following demonstrates "
"the use of ``uid`` and ``month`` to intersect two data. In terms of "
"implementation, multiple fields are concatenated into a string, so please"
" ensure that there is no duplication of the multi-column composite "
"primary key."
msgstr ""
"我们还可以使用多个字段来求交，下面演示了如何使用 ``uid`` 和 ``month`` "
"来求交两个数据。在实现方面，多个字段被连接成一个字符串，因此请确保没有重复的多列复合键。"

#: ../../tutorial/PSI_On_SPU.ipynb:802
msgid ""
"Similarly, we use pandas.DataFrame.join to verify the correctness of the "
"result, we can see that the two data have been aligned according to "
"``uid`` and ``month``, and sorted according to their lexicographical "
"order."
msgstr ""
"类似地，我们使用 ``panda.dataframe.join`` 来验证结果的正确性，可以看到这两个数据已经根据 ``uid`` 和 "
"``month`` 对齐，并根据它们的字典序排序。"

#: ../../tutorial/PSI_On_SPU.ipynb:831
msgid "Three parties PSI"
msgstr "三方隐私求交"

#: ../../tutorial/PSI_On_SPU.ipynb:842
msgid ""
"Next, we add a third-party ``carol``, and create a PYU device for it, as "
"well as an SPU device built by the third party."
msgstr "接下来，我们添加第三方 ``carol`` ，并为其创建一个PYU设备，以及一个由三方构建的SPU设备。"

#: ../../tutorial/PSI_On_SPU.ipynb:864
msgid ""
"Then, use ``uid`` and ``month`` as the composite primary key to perform a"
" three-way negotiation. It should be noted that the three-way negotiation"
" only supports the ECDH protocol for the time being."
msgstr "然后使用 ``uid`` 和 ``month`` 作为求交键来执行三方求交。目前三方隐私求交暂时只支持ECDH协议。"

#: ../../tutorial/PSI_On_SPU.ipynb:887
msgid ""
"Similarly, we use pandas.DataFrame.join to verify the correctness of the "
"result."
msgstr "最后我们同样使用 ``panda.dataframe.join`` 来验证结果的正确性。"

#: ../../tutorial/PSI_On_SPU.ipynb:920
msgid "What’s Next"
msgstr "接下来"

#: ../../tutorial/PSI_On_SPU.ipynb:931
msgid ""
"OK! Through this tutorial, we have seen how to do two-party and three-"
"party data intersections via SPU. After completing the data intersection,"
" we can perform machine learning modeling on the aligned dataset."
msgstr "通过本教程，我们了解了如何通过SPU进行两方和三方数据求交。在得到数据交集后，我们可以对对齐的数据集进行机器学习建模。"

#: ../../tutorial/PSI_On_SPU.ipynb:933
msgid ""
"`Logistic Regression On SPU <./lr_with_spu.ipynb>`__: Logistic regression"
" modeling on SPU using JAX."
msgstr "`逻辑回归 <./lr_with_spu.ipynb>`__\\ ：使用JAX在SPU上进行逻辑回归训练。"

#: ../../tutorial/PSI_On_SPU.ipynb:934
msgid ""
"`Neural Network on SPU <./nn_with_spu.ipynb>`__: Neural Network Modeling "
"on SPU with JAX."
msgstr "`神经网络 <./nn_with_spu.ipynb>`__：用JAX在SPU上进行神经网络训练。"

#: ../../tutorial/PSI_On_SPU.ipynb:935
msgid ""
"`Basic Split Learning <./split_learning_gnn.ipynb>`__: Neural Network "
"Modeling with TensorFlow and Split Learning."
msgstr "`拆分学习 <./split_learning_gnn.ipynb>`__：使用TensorFlow进行神经网络拆分学习。"

