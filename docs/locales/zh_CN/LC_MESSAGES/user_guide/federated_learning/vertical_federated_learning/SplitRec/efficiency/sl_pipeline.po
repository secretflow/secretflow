# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022 Ant Group Co., Ltd.
# This file is distributed under the same license as the SecretFlow package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
msgid ""
msgstr ""
"Project-Id-Version: SecretFlow \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-26 17:36+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../user_guide/federated_learning/vertical_federated_learning/SplitRec/efficiency/sl_pipeline.ipynb:9
msgid "SplitRec：在隐语拆分学习中使用流水线并行"
msgstr ""

#: ../../user_guide/federated_learning/vertical_federated_learning/SplitRec/efficiency/sl_pipeline.ipynb:11
msgid "注意： 以下代码仅供演示用途，在演示过程中可能会揭露部分信息。请勿直接将此示例代码用于实际生产环境中。在实际部署前，请根据您的具体需求和安全标准进行必要的修改和调整。"
msgstr ""

#: ../../user_guide/federated_learning/vertical_federated_learning/SplitRec/efficiency/sl_pipeline.ipynb:15
msgid "本示例基于基于“拆分学习：银行营销”教程制作，建议先观看那个教程。"
msgstr ""

#: ../../user_guide/federated_learning/vertical_federated_learning/SplitRec/efficiency/sl_pipeline.ipynb:17
msgid ""
"在拆分学习中，由于模型被拆分在多个设备当中，进行训练的时候，各方需要对中间结果和梯度进行多次传输，计算和网络通信存在大量 idle "
"时间，我们在隐语中参考论文\\ `《PipeLearn: Pipeline Parallelism for Collaborative "
"Machine Learnin》 <https://arxiv.org/pdf/2302.12803.pdf>`__\\ ，利用隐语底座 "
"RayFed "
"的任务调度能力，实现了流水线并行，使得计算和通信能够交叠隐藏部分计算时间，提高资源利用率。由于计算和通信的并发执行，使用流水线并行可能会带来模型准确性上的损失，用户可以根据实际场景平衡性能和精度。"
msgstr ""

#: ../../user_guide/federated_learning/vertical_federated_learning/SplitRec/efficiency/sl_pipeline.ipynb:19
msgid "下面我们通过一个例子来看一下如何使用在隐语拆分学习中使用流水线并行。"
msgstr ""

#: ../../user_guide/federated_learning/vertical_federated_learning/SplitRec/efficiency/sl_pipeline.ipynb:31
msgid "环境设置"
msgstr ""

#: ../../user_guide/federated_learning/vertical_federated_learning/SplitRec/efficiency/sl_pipeline.ipynb:33
msgid "首先，我们在 secretflow 环境中创造 2 个实体 alice 和 bob。"
msgstr ""

#: ../../user_guide/federated_learning/vertical_federated_learning/SplitRec/efficiency/sl_pipeline.ipynb:84
msgid "准备数据"
msgstr ""

#: ../../user_guide/federated_learning/vertical_federated_learning/SplitRec/efficiency/sl_pipeline.ipynb:86
msgid "接下来我们准备要学习的数据。"
msgstr ""

#: ../../user_guide/federated_learning/vertical_federated_learning/SplitRec/efficiency/sl_pipeline.ipynb:88
msgid "我们使用“拆分学习：银行营销”中的数据准备和处理方法，下载银行营销数据集并进行处理。alice 和 bob 的角色和之前的教程完全相同："
msgstr ""

#: ../../user_guide/federated_learning/vertical_federated_learning/SplitRec/efficiency/sl_pipeline.ipynb:174
msgid "定义模型结构"
msgstr ""

#: ../../user_guide/federated_learning/vertical_federated_learning/SplitRec/efficiency/sl_pipeline.ipynb:176
msgid ""
"接下来我们创建联邦模型，同样地，我们使用“拆分学习：银行营销”中的建模，构建出 base_model 和 fuse_model，然后就可以定义 "
"SLModel 用于训练："
msgstr ""

#: ../../user_guide/federated_learning/vertical_federated_learning/SplitRec/efficiency/sl_pipeline.ipynb:265
msgid "定义 SLModel"
msgstr ""

#: ../../user_guide/federated_learning/vertical_federated_learning/SplitRec/efficiency/sl_pipeline.ipynb:267
msgid ""
"这里如果使用流水线并行，设置 strategy = ‘pipline’，并设置参数 pipeline_size，pipeline_size "
"增大并发程度会增大，但达到一定阈值，当一方的计算或网络被打满，性能将不会再有提升，通常 pipeline_size 设为 2-4。"
msgstr ""

#: ../../user_guide/federated_learning/vertical_federated_learning/SplitRec/efficiency/sl_pipeline.ipynb:752
msgid "开始训练"
msgstr ""

#: ../../user_guide/federated_learning/vertical_federated_learning/SplitRec/efficiency/sl_pipeline.ipynb:754
msgid "我们分别对没有使用通讯压缩的模型和使用了量化压缩的模型进行训练，并把训练轮次拉高到40轮，看看效果如何。"
msgstr ""

#: ../../user_guide/federated_learning/vertical_federated_learning/SplitRec/efficiency/sl_pipeline.ipynb:1177
msgid ""
"可以看到，两个模型的验证集 auc 均在 0.85 左右波动，使用流水线并行对此任务的训练精度影响不大，而训练时间由 0.76 分钟下降到 "
"0.65 分钟。"
msgstr ""

#: ../../user_guide/federated_learning/vertical_federated_learning/SplitRec/efficiency/sl_pipeline.ipynb:1189
msgid "总结"
msgstr ""

#: ../../user_guide/federated_learning/vertical_federated_learning/SplitRec/efficiency/sl_pipeline.ipynb:1191
msgid ""
"本篇示例介绍了隐语拆分学习中流水线并行的使用方法。与一般拆分学习的使用方法一样，只需在定义 SLModel 时指定 "
"strategy=‘pipeline’ 并设置 pipeline_num 即可。"
msgstr ""

